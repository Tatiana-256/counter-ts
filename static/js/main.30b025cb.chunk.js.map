{"version":3,"sources":["components(UI)/header/NavMenu.module.css","components(UI)/counterSettings/CounterSettings.module.css","components(UI)/counter/Counter.module.css","components(UI)/header/NavMenu.tsx","api(DAL)/api.ts","redux-store(BLL)/appReducer.tsx","redux-store(BLL)/counterReducer.tsx","components(UI)/counter/Counter.tsx","redux-store(BLL)/settingsReducer.tsx","components(UI)/counterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","redux-store(BLL)/store.tsx","index.tsx"],"names":["module","exports","NavigationMenu","props","className","styles","container","header","to","rout","some","s","requestStatus","notification","instance","axios","create","baseURL","counterServiceAPI","getCounter","get","then","res","data","updateCounter","value","put","getCounterSettings","updateCounterMaxValue","patch","maxValue","updateCounterStartValue","startValue","window","initialState","actionsApp","status","type","actions","incrementCounterValue","dispatch","getState","a","console","error","Counter","useSelector","state","count","settings","useDispatch","useEffect","result","maxValueAchieved","setting","counter","buttons","onClick","disabled","CounterSettings","validation","onChange","e","Number","currentTarget","App","path","component","exact","render","Boolean","location","hostname","match","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.30b025cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NavMenu_container__-63P7\",\"header\":\"NavMenu_header__1DJU4\",\"rout\":\"NavMenu_rout__47fq0\",\"notification\":\"NavMenu_notification__16P-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CounterSettings_container__3ky-p\",\"setting\":\"CounterSettings_setting__134Re\",\"notification\":\"CounterSettings_notification__1gpSD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setting\":\"Counter_setting__3MkuB\",\"buttons\":\"Counter_buttons__2tZ85\",\"counter\":\"Counter_counter__2TzoN\"};","import React from 'react';\r\nimport styles from './NavMenu.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {requestStatusType} from \"../../redux-store(BLL)/appReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    requestStatus: requestStatusType\r\n}\r\n\r\nconst NavigationMenu = (props: PropsType) => {\r\n    return (<div className={styles.container}>\r\n            <div className={styles.header}>\r\n                <NavLink to=\"/counter\" className={styles.rout}> Counter </NavLink>\r\n                <NavLink to=\"/settings\" className={styles.rout}> Settings </NavLink>\r\n            </div>\r\n            {\r\n                [\"IN-PROGRESS\", \"ERROR\"].some(s => s === props.requestStatus) &&\r\n                <div className={styles.notification}>\r\n                    {props.requestStatus === \"IN-PROGRESS\" && <div>Loading...</div>}\r\n                    {props.requestStatus === \"ERROR\" && <div>Error</div>}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavigationMenu\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:3000\"\r\n    // process.env.API_BASE_URL\r\n})\r\n\r\ntype Counter = {\r\n    value: number\r\n}\r\n\r\ntype CounterSettings = {\r\n    maxValue: number,\r\n    startValue: number\r\n}\r\n\r\nexport const counterServiceAPI = {\r\n    getCounter() {\r\n        return instance.get<Counter>(\"/counter\").then(res => res.data)\r\n    },\r\n    updateCounter(value: number) {\r\n        return instance.put<Counter>(\"/counter\", {value: value})\r\n    },\r\n    getCounterSettings() {\r\n        return instance.get<CounterSettings>(\"/counter-settings\").then(res => res.data)\r\n    },\r\n    updateCounterMaxValue(value: number) {\r\n        return instance.patch<CounterSettings>(\"/counter-settings\", {maxValue: value})\r\n    },\r\n    updateCounterStartValue(value: number) {\r\n        return instance.patch<CounterSettings>(\"/counter-settings\", {startValue: value})\r\n    }\r\n}\r\n\r\n\r\n// @ts-ignore\r\nwindow.counterServiceAPI = counterServiceAPI\r\n","import {InferActionsTypes} from \"./store\";\r\n\r\ntype initialStateType = typeof initialState\r\nexport type requestStatusType = \"NONE\" | \"IN-PROGRESS\" |\"SUCCESS\" | \"ERROR\"\r\n\r\nconst initialState = {\r\n    requestStatus: \"NONE\" as requestStatusType\r\n}\r\n\r\n\r\nexport const appReducer = (state = initialState, action: appActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET_REQUEST_STATUS\":\r\n            return {...state, requestStatus: action.status}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport type appActionsType = InferActionsTypes<typeof actionsApp>\r\n\r\nexport const actionsApp = {\r\n    setRequestStatus: (status: requestStatusType) => ({\r\n        type: \"APP/SET_REQUEST_STATUS\", status\r\n    } as const)\r\n}\r\n","import {AppStateType, baseThunkType, InferActionsTypes} from \"./store\";\r\nimport {counterServiceAPI} from \"../api(DAL)/api\";\r\nimport {actionsApp, appActionsType} from \"./appReducer\";\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    value: 0,\r\n}\r\n\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"COUNTER/SET_COUNTER_VALUE\":\r\n            return {...state, value: action.value}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport type ActionsType = InferActionsTypes<typeof actions> | appActionsType\r\n\r\n\r\nexport const actions = {\r\n    setCounterValue: (value: number) => ({type: \"COUNTER/SET_COUNTER_VALUE\", value} as const),\r\n}\r\n\r\n\r\n//_________________ thunk-creators____________________\r\n\r\ntype thunkType = baseThunkType<ActionsType>\r\nexport const setCounterValue = (): thunkType => async (dispatch, getState) => {\r\n    dispatch(actionsApp.setRequestStatus(\"IN-PROGRESS\"))\r\n    try {\r\n        let result = await counterServiceAPI.getCounter()\r\n        dispatch(actions.setCounterValue(result.value))\r\n        dispatch(actionsApp.setRequestStatus(\"SUCCESS\"))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(actionsApp.setRequestStatus(\"ERROR\"))\r\n    }\r\n\r\n}\r\n\r\nexport const incrementCounterValue = (value: number): thunkType => async (dispatch, getState: () => AppStateType) => {\r\n    dispatch(actionsApp.setRequestStatus(\"IN-PROGRESS\"))\r\n    try {\r\n        let result = await counterServiceAPI.updateCounter(value)\r\n        dispatch(actions.setCounterValue(value))\r\n        dispatch(actionsApp.setRequestStatus(\"SUCCESS\"))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(actionsApp.setRequestStatus(\"ERROR\"))\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {AppStateType} from '../../redux-store(BLL)/store';\r\nimport {incrementCounterValue, setCounterValue} from '../../redux-store(BLL)/counterReducer';\r\nimport styles from \"./Counter.module.css\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\nconst Counter = (props: PropsType) => {\r\n    const value = useSelector<AppStateType, number>(state => state.count.value)\r\n    const startValue = useSelector<AppStateType, number>(state => state.settings.startValue)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.settings.maxValue)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setCounterValue())\r\n    }, [])\r\n\r\n    const increment = () => {\r\n        dispatch(incrementCounterValue(value + 1))\r\n    }\r\n\r\n    const resetStartValue = () => {\r\n        dispatch(incrementCounterValue(startValue))\r\n    }\r\n\r\n    const maxValueAchieved = value >= maxValue\r\n\r\n    return (\r\n        <div className={styles.setting}>\r\n            <div className={styles.counter}>Counter</div>\r\n            <div>{value}</div>\r\n            <div className={styles.buttons}>\r\n                <button onClick={increment} disabled={maxValueAchieved}>Increment</button>\r\n                <button onClick={resetStartValue}>Reset</button>\r\n            </div>\r\n            {maxValueAchieved && <div>Counter can`t be more than max value</div>}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Counter\r\n","import {baseThunkType, InferActionsTypes} from \"./store\";\r\nimport {counterServiceAPI} from \"../api(DAL)/api\";\r\nimport {appActionsType} from \"./appReducer\";\r\nimport {actionsApp} from \"./appReducer\";\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    maxValue: 10,\r\n    startValue: 0,\r\n}\r\n\r\n\r\nexport const settingsReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"COUNTER-SETTINGS/SET_MAX_VALUE\":\r\n            return {...state, maxValue: action.maxValue}\r\n        case  \"COUNTER-SETTINGS/SET_START_VALUE\":\r\n            return {...state, startValue: action.startValue}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport type ActionsType = InferActionsTypes<typeof actions> | appActionsType\r\n\r\nexport const actions = {\r\n    setCounterMaxValue: (maxValue: number) => ({\r\n        type: \"COUNTER-SETTINGS/SET_MAX_VALUE\", maxValue\r\n    } as const),\r\n    setCounterStartValue: (startValue: number) => ({\r\n        type: \"COUNTER-SETTINGS/SET_START_VALUE\", startValue\r\n    } as const)\r\n}\r\n\r\n\r\n//_________________ thunk-creators____________________\r\n\r\ntype thunkType = baseThunkType<ActionsType>\r\n\r\n\r\nexport const setCounterSettings = (): thunkType => async (dispatch, getState) => {\r\n    dispatch(actionsApp.setRequestStatus(\"IN-PROGRESS\"))\r\n    try {\r\n        let result = await counterServiceAPI.getCounterSettings()\r\n        dispatch(actions.setCounterMaxValue(result.maxValue))\r\n        dispatch(actions.setCounterStartValue(result.startValue))\r\n        dispatch(actionsApp.setRequestStatus(\"SUCCESS\"))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(actionsApp.setRequestStatus(\"ERROR\"))\r\n    }\r\n}\r\n\r\nexport const incrementCounterMaxValue = (value: number): thunkType => async (dispatch) => {\r\n    dispatch(actionsApp.setRequestStatus(\"IN-PROGRESS\"))\r\n    try {\r\n        let result = await counterServiceAPI.updateCounterMaxValue(value)\r\n        dispatch(actions.setCounterMaxValue(value))\r\n        dispatch(actionsApp.setRequestStatus(\"SUCCESS\"))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(actionsApp.setRequestStatus(\"ERROR\"))\r\n    }\r\n\r\n}\r\n\r\nexport const incrementCounterStartValue = (value: number): thunkType => async (dispatch) => {\r\n    dispatch(actionsApp.setRequestStatus(\"IN-PROGRESS\"))\r\n    try {\r\n        let result = await counterServiceAPI.updateCounterStartValue(value)\r\n        dispatch(actions.setCounterStartValue(value))\r\n        dispatch(actionsApp.setRequestStatus(\"SUCCESS\"))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(actionsApp.setRequestStatus(\"ERROR\"))\r\n    }\r\n\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport styles from './CounterSettings.module.css'\r\nimport {AppStateType} from \"../../redux-store(BLL)/store\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {incrementCounterMaxValue, incrementCounterStartValue} from \"../../redux-store(BLL)/settingsReducer\";\r\n\r\ntype PropsType = {}\r\n\r\nconst CounterSettings = (props: PropsType) => {\r\n    const maxValue = useSelector<AppStateType, number>(state => state.settings.maxValue)\r\n    const startValue = useSelector<AppStateType, number>(state => state.settings.startValue)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const incrementMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(incrementCounterMaxValue(Number(e.currentTarget.value)))\r\n    }\r\n    const incrementStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(incrementCounterStartValue(Number(e.currentTarget.value)))\r\n    }\r\n\r\n    const validation = maxValue < startValue\r\n    return (<div className={styles.container}>\r\n            <div className={styles.setting}>\r\n                <div>Start value</div>\r\n                <div>\r\n                    <input value={startValue} onChange={incrementStartValue} type={\"number\"}/>\r\n                </div>\r\n            </div>\r\n            <div className={styles.setting}>\r\n                <div>Max value</div>\r\n                <div>\r\n                    <input value={maxValue} onChange={incrementMaxValue} type={\"number\"} disabled={validation}/>\r\n                </div>\r\n            </div>\r\n\r\n            {validation && <div className={styles.notification}>Max value mast be over than start value</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CounterSettings\r\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport './App.css';\nimport {AppStateType} from \"./redux-store(BLL)/store\";\nimport NavigationMenu from './components(UI)/header/NavMenu';\nimport Counter from \"./components(UI)/counter/Counter\";\nimport CounterSettings from \"./components(UI)/counterSettings/CounterSettings\";\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {setCounterSettings} from \"./redux-store(BLL)/settingsReducer\";\nimport {requestStatusType} from './redux-store(BLL)/appReducer';\n\n\ntype PropsType = {}\n\nconst App = (props: PropsType) => {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setCounterSettings())\n    }, [])\n\n    const requestStatus = useSelector<AppStateType, requestStatusType>(state => state.requestStatus.requestStatus)\n\n    return (\n        <div className=\"App\">\n            <NavigationMenu requestStatus={requestStatus}/>\n            <Switch>\n                <Route path=\"/counter\" component={Counter}/>\n                <Route path=\"/settings\" component={CounterSettings}/>\n                <Redirect exact path=\"/\" to={\"/counter\"}/>\n                <Route path=\"*\" render={() => <div>404 Not found</div>}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, Action, combineReducers, applyMiddleware} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {settingsReducer} from \"./settingsReducer\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\n\r\nlet rootReducers = combineReducers({\r\n    count: counterReducer,\r\n    settings: settingsReducer,\r\n    requestStatus: appReducer\r\n})\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\n\r\n// ______type of state___________\r\n\r\ntype RootReducerType = typeof rootReducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// ______type of actions___________\r\n\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n\r\n// ______type of thunk-creator___________\r\n\r\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './api(DAL)/api'\nimport {Provider} from 'react-redux';\nimport store from \"./redux-store(BLL)/store\";\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}><App/></Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}